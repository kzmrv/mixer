// Code generated by protoc-gen-go. DO NOT EDIT.
// source: read_work.proto

package read_work

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Work struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	TargetSubstring      string   `protobuf:"bytes,2,opt,name=targetSubstring,proto3" json:"targetSubstring,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Work) Reset()         { *m = Work{} }
func (m *Work) String() string { return proto.CompactTextString(m) }
func (*Work) ProtoMessage()    {}
func (*Work) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da7706f7097cf70, []int{0}
}

func (m *Work) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Work.Unmarshal(m, b)
}
func (m *Work) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Work.Marshal(b, m, deterministic)
}
func (m *Work) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Work.Merge(m, src)
}
func (m *Work) XXX_Size() int {
	return xxx_messageInfo_Work.Size(m)
}
func (m *Work) XXX_DiscardUnknown() {
	xxx_messageInfo_Work.DiscardUnknown(m)
}

var xxx_messageInfo_Work proto.InternalMessageInfo

func (m *Work) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Work) GetTargetSubstring() string {
	if m != nil {
		return m.TargetSubstring
	}
	return ""
}

type LogLine struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Entry                string               `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LogLine) Reset()         { *m = LogLine{} }
func (m *LogLine) String() string { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()    {}
func (*LogLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da7706f7097cf70, []int{1}
}

func (m *LogLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLine.Unmarshal(m, b)
}
func (m *LogLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLine.Marshal(b, m, deterministic)
}
func (m *LogLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLine.Merge(m, src)
}
func (m *LogLine) XXX_Size() int {
	return xxx_messageInfo_LogLine.Size(m)
}
func (m *LogLine) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLine.DiscardUnknown(m)
}

var xxx_messageInfo_LogLine proto.InternalMessageInfo

func (m *LogLine) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogLine) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type WorkResult struct {
	LogLines             []*LogLine `protobuf:"bytes,1,rep,name=logLines,proto3" json:"logLines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WorkResult) Reset()         { *m = WorkResult{} }
func (m *WorkResult) String() string { return proto.CompactTextString(m) }
func (*WorkResult) ProtoMessage()    {}
func (*WorkResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da7706f7097cf70, []int{2}
}

func (m *WorkResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkResult.Unmarshal(m, b)
}
func (m *WorkResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkResult.Marshal(b, m, deterministic)
}
func (m *WorkResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkResult.Merge(m, src)
}
func (m *WorkResult) XXX_Size() int {
	return xxx_messageInfo_WorkResult.Size(m)
}
func (m *WorkResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkResult.DiscardUnknown(m)
}

var xxx_messageInfo_WorkResult proto.InternalMessageInfo

func (m *WorkResult) GetLogLines() []*LogLine {
	if m != nil {
		return m.LogLines
	}
	return nil
}

func init() {
	proto.RegisterType((*Work)(nil), "Work")
	proto.RegisterType((*LogLine)(nil), "LogLine")
	proto.RegisterType((*WorkResult)(nil), "WorkResult")
}

func init() { proto.RegisterFile("read_work.proto", fileDescriptor_5da7706f7097cf70) }

var fileDescriptor_5da7706f7097cf70 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xb1, 0x6a, 0xc3, 0x30,
	0x10, 0x86, 0xeb, 0x36, 0x71, 0x93, 0xf3, 0x10, 0x10, 0x1d, 0x8c, 0x97, 0x1a, 0xd3, 0xc1, 0x74,
	0x50, 0x8a, 0xbb, 0xf4, 0x01, 0x32, 0x66, 0x72, 0x0b, 0xa5, 0x53, 0xb1, 0xe9, 0x45, 0x98, 0x28,
	0xbe, 0x70, 0x3a, 0x53, 0xfa, 0xf6, 0xc5, 0x52, 0x12, 0x43, 0x26, 0xe9, 0x74, 0xbf, 0xee, 0xfb,
	0x0e, 0x56, 0x8c, 0xcd, 0xcf, 0xf7, 0x2f, 0xf1, 0x5e, 0x1f, 0x99, 0x84, 0xb2, 0x47, 0x43, 0x64,
	0x2c, 0xae, 0x7d, 0xd5, 0x0e, 0xbb, 0xb5, 0x74, 0x07, 0x74, 0xd2, 0x1c, 0x8e, 0x21, 0x50, 0x6c,
	0x60, 0xf6, 0x49, 0xbc, 0x57, 0x0a, 0x66, 0xbb, 0xce, 0x62, 0x1a, 0xe5, 0x51, 0xb9, 0xac, 0xfd,
	0x5d, 0x95, 0xb0, 0x92, 0x86, 0x0d, 0xca, 0xfb, 0xd0, 0x3a, 0xe1, 0xae, 0x37, 0xe9, 0xad, 0x6f,
	0x5f, 0x3f, 0x17, 0x5f, 0x70, 0xbf, 0x25, 0xb3, 0xed, 0x7a, 0x54, 0x6f, 0xb0, 0xbc, 0x30, 0xfc,
	0xb4, 0xa4, 0xca, 0x74, 0xb0, 0xd0, 0x67, 0x0b, 0xfd, 0x71, 0x4e, 0xd4, 0x53, 0x58, 0x3d, 0xc0,
	0x1c, 0x7b, 0xe1, 0xbf, 0x13, 0x24, 0x14, 0x45, 0x05, 0x30, 0x0a, 0xd6, 0xe8, 0x06, 0x2b, 0xea,
	0x09, 0x16, 0x36, 0x80, 0x5c, 0x1a, 0xe5, 0x77, 0x65, 0x52, 0x2d, 0xf4, 0x89, 0x5c, 0x5f, 0x3a,
	0xd5, 0x33, 0xc4, 0xe3, 0x1f, 0x64, 0x95, 0x43, 0xbc, 0x21, 0xbf, 0xe0, 0x5c, 0x8f, 0x47, 0x96,
	0xe8, 0x69, 0x5a, 0x71, 0xf3, 0x12, 0xb5, 0xb1, 0x97, 0x7a, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x28, 0x21, 0xc8, 0xac, 0x3b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	DoWork(ctx context.Context, in *Work, opts ...grpc.CallOption) (Worker_DoWorkClient, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) DoWork(ctx context.Context, in *Work, opts ...grpc.CallOption) (Worker_DoWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/Worker/DoWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerDoWorkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_DoWorkClient interface {
	Recv() (*WorkResult, error)
	grpc.ClientStream
}

type workerDoWorkClient struct {
	grpc.ClientStream
}

func (x *workerDoWorkClient) Recv() (*WorkResult, error) {
	m := new(WorkResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	DoWork(*Work, Worker_DoWorkServer) error
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) DoWork(req *Work, srv Worker_DoWorkServer) error {
	return status.Errorf(codes.Unimplemented, "method DoWork not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_DoWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Work)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).DoWork(m, &workerDoWorkServer{stream})
}

type Worker_DoWorkServer interface {
	Send(*WorkResult) error
	grpc.ServerStream
}

type workerDoWorkServer struct {
	grpc.ServerStream
}

func (x *workerDoWorkServer) Send(m *WorkResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoWork",
			Handler:       _Worker_DoWork_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "read_work.proto",
}
